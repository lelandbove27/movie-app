{"version":3,"sources":["MovieCard.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","_ref","movie","react_default","a","createElement","className","src","Poster","alt","Title","Year","App","_useState","useState","_useState2","Object","slicedToArray","movies","setMovies","searchMovies","asyncToGenerator","_regeneratorRuntime","mark","_callee","movieTitle","response","data","wrap","_context","prev","next","fetch","concat","sent","json","Search","stop","_x","apply","this","arguments","useEffect","Fragment","placeholder","onChange","event","target","value","index_esm","color","map","src_MovieCard","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"mNAiBeA,EAfG,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAOjB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAsB,QAAjBL,EAAMM,OAAmBN,EAAMM,OAAS,kCAAmCC,IAAI,gBACzFN,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,MAAV,KAAmBR,EAAMS,KAAzB,wxMCLX,IAiDcC,EA/CH,WAAM,IAAAC,EAEYC,mBAAS,IAFrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETK,EAFSH,EAAA,GAEDI,EAFCJ,EAAA,GAKVK,EAAY,eAAAnB,EAAAe,OAAAK,EAAA,EAAAL,CAAAM,IAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAA,OAAAL,IAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACIC,MAAK,GAAAC,OARd,uDAQc,OAAAA,OAAkBR,IAD3B,cACbC,EADaG,EAAAK,KAAAL,EAAAE,KAAA,EAEAL,EAASS,OAFT,OAEbR,EAFaE,EAAAK,KAQjBf,EALEQ,EAKQA,EAAKS,OAJI,IAJF,wBAAAP,EAAAQ,SAAAb,MAAH,gBAAAc,GAAA,OAAArC,EAAAsC,MAAAC,KAAAC,YAAA,GAgBlB,OAJAC,oBAAU,WACRtB,EAAa,eACZ,IAGDjB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAuC,SAAA,KACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,eAAesC,YAAY,oBAAoBC,SAAU,SAAAC,GAAK,OAAI1B,EAAa0B,EAAMC,OAAOC,UAC7G7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAU3C,UAAU,cAAc4C,MAAM,WAG1C/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEXH,EAAAC,EAAAC,cAAA,WAEIa,EAAUA,EAAOiC,IAAI,SAACjD,GAAD,OACnBC,EAAAC,EAAAC,cAAC+C,EAAD,CAAWlD,MAAOA,MACb,uBClCRmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAzD,GAAiD,IAA9C2D,EAA8C3D,EAA9C2D,OAAQC,EAAsC5D,EAAtC4D,OAAQC,EAA8B7D,EAA9B6D,OAAQC,EAAsB9D,EAAtB8D,OAAQC,EAAc/D,EAAd+D,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlE,EAAAC,EAAAC,cAACF,EAAAC,EAAMkE,WAAP,KACEnE,EAAAC,EAAAC,cAACkE,EAAD,QAOJlB","file":"static/js/main.8405aede.chunk.js","sourcesContent":["import React from 'react';\n\nconst MovieCard = ( {movie} ) => {\n    //Possible function for displaying more information (more info not available from API)\n    /* \n    function displayMore() {\n        console.log(movie);\n    }\n    */\n    return (\n        <div className=\"card\">\n            <img src={movie.Poster !== 'N/A' ? movie.Poster : 'https://via.placeholder.com/400'} alt=\"moviePoster\"></img>\n            <p>{movie.Title} ({movie.Year})</p>\n        </div>\n    );   \n}\n\nexport default MovieCard;"," import './App.css';\n import { useState, useEffect } from 'react';\n import React from 'react';\n import { BsSearch } from 'react-icons/bs';\n import MovieCard from './MovieCard';\n \n\n const OMDB_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=45ee9669';\n\nconst App = () => {\n\n  const [movies, setMovies] = useState([]);\n\n  //movie title is what the user will enter into the search box\n  const searchMovies = async (movieTitle) => {\n    const response = await fetch(`${OMDB_URL}&s=${movieTitle}`);\n    const data = await response.json();\n    if(!data) {\n      const emptyArray = [];\n      setMovies(emptyArray);\n    }\n    else {\n      setMovies(data.Search);\n    }  \n  }\n\n  useEffect(() => {\n    searchMovies('Spider-man');\n  }, []); \n\n  return (\n    <>\n      <div className=\"App\">\n      <header>\n        <h1>Movie Finder</h1> \n        <div className=\"search-bar\">\n          <input className=\"search-input\" placeholder=\"Search for movies\" onChange={event => searchMovies(event.target.value)}></input>\n          <BsSearch className=\"search-icon\" color='gray'/>\n        </div>\n      </header>\n        <div className=\"movieContainer\">\n          {\n            <div>\n              {\n                movies ? (movies.map((movie) => (\n                  <MovieCard movie={movie}/>\n                ))) : (\"No Movies Found\")\n              }\n            </div>\n          }\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}